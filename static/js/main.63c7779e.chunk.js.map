{"version":3,"sources":["components/HeaderBar.tsx","components/QRCode.tsx","App.tsx","serviceWorker.ts","store/index.tsx","index.tsx"],"names":["HeaderBar","props","small","theme","type","className","responsive","tag","UncontrolledDropdown","nav","DropdownToggle","aria-haspopup","caret","color","icon","padding","size","DropdownMenu","flip","Row","Col","widths","href","QRCodeConnected","connect","state","data","jsonforms","core","display","string","JSON","stringify","length","value","style","App","useState","isVisible","setVisible","Container","QRCode","onClick","Boolean","window","location","hostname","match","store","createStore","combineReducers","jsonformsReducer","cells","materialCells","renderers","materialRenderers","$RefParser","require","isYAML","process","YAML_SOURCE","schemaURL","uischemaURL","fetchSchema","url","a","dereference","fetch","text","out","yaml","safeLoad","console","debug","error","then","schemaRetrieved","log","err","schema","uischema","dataC","_meta","dispatch","Actions","init","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.63c7779e.chunk.js","sourcesContent":["// @ts-ignore\nimport { Col, Button, DropdownToggle, LinkListItem, DropdownMenu, Header, HeaderBrand, HeaderContent, HeaderRightZone, Icon, LinkList,  Row, UncontrolledDropdown,} from \"design-react-kit\";\n\nimport React from \"react\";\n\nexport interface Props {\n  className: string | undefined;\n}\n\nexport const HeaderBar = (props: Props) => {\n  return (\n    <Header small={false} theme=\"\" type=\"slim\" className={props.className}>\n      <HeaderContent>\n        <HeaderBrand responsive tag=\"a\">\n          Ente appartenenza/Owner\n        </HeaderBrand>\n        <HeaderRightZone>\n          <UncontrolledDropdown nav tag=\"div\">\n            <DropdownToggle aria-haspopup caret color=\"secondary\" nav>\n              ITA\n              <Icon color=\"\" icon=\"it-expand\" padding={false} size=\"\" />\n            </DropdownToggle>\n            <DropdownMenu flip tag=\"div\">\n              <Row tag=\"div\">\n                <Col\n                  size=\"12\"\n                  tag=\"div\"\n                  widths={[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]}\n                >\n                  <LinkList tag=\"div\">\n                    <LinkListItem href=\"#\">\n                      {/* tag={function noRefCheck() {}} */}\n                      <span>ITA</span>\n                    </LinkListItem>\n                    <LinkListItem href=\"#\">\n                      <span>ENG</span>\n                    </LinkListItem>\n                  </LinkList>\n                </Col>\n              </Row>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n          <Button\n            className=\"btn-icon\"\n            color=\"primary\"\n            href=\"#\"\n            icon={false}\n            size=\"full\"\n            tag=\"button\"\n          >\n            <span className=\"rounded-icon\">\n              <Icon color=\"primary\" icon=\"it-user\" padding={false} size=\"\" />\n            </span>\n            <span className=\"d-none d-lg-block\">Accedi all'area personale</span>\n          </Button>\n        </HeaderRightZone>\n      </HeaderContent>\n    </Header>\n  );\n};\n\n// export default HeaderBar;","import React from \"react\";\nimport Qr from \"qrcode.react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nconst qrCode = ({ data, display }: any) => {\n  const string = JSON.stringify(data);\n  // size will be minimum 128, maximum 512\n  const size =\n    (string.length / 100) * 128 < 128\n      ? 128\n      : (string.length / 100) * 128 > 512\n      ? 512\n      : (string.length / 100) * 128;\n\n  return <Qr value={string} size={size} style={{ display: display }} />;\n};\n\nqrCode.propTypes = {\n  props: PropTypes.any,\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    data: state.jsonforms?.core?.data,\n  };\n};\n\nconst QRCodeConnected = connect(mapStateToProps)(qrCode);\n\nexport default QRCodeConnected;\n","import React, {useState} from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { HeaderBar } from \"./components/HeaderBar\";\nimport { JsonFormsDispatch } from \"@jsonforms/react\";\n// @ts-ignore\nimport { Button, Container } from \"design-react-kit\";\nimport QRCode from \"./components/QRCode\";\n\nimport \"bootstrap-italia/dist/css/bootstrap-italia.min.css\";\nimport \"typeface-titillium-web/index.css\";\nimport \"typeface-roboto-mono/index.css\";\nimport \"typeface-lora/index.css\";\n\n\nexport const App = (props: any) => {\n  const [isVisible, setVisible] = useState(false);\n  return (\n    <div className=\"App\">\n      <HeaderBar className=\"App-header\" />\n      <Container>\n        <JsonFormsDispatch />\n        <QRCode display={isVisible ? \"block\" : \"none\"} />\n        <Button color=\"primary\" icon={false} tag=\"button\">\n          Save\n        </Button>{\" \"}\n        <Button color=\"secondary\" icon={false} tag=\"button\">\n          Reset\n        </Button>{\" \"}\n        <Button\n          color=\"secondary\"\n          icon={false}\n          tag=\"button\"\n          onClick={() => setVisible(!isVisible)}\n        >\n          Show/Hide QRCode\n        </Button>\n      </Container>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { jsonformsReducer } from \"@jsonforms/core\";\nimport {\n  materialRenderers,\n  materialCells,\n} from \"@jsonforms/material-renderers\";\nimport { combineReducers, createStore } from \"redux\";\n\nconst store = createStore(combineReducers({ jsonforms: jsonformsReducer() }), {\n  jsonforms: {\n    cells: materialCells,\n    renderers: materialRenderers,\n  },\n});\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\n\nimport { Actions } from \"@jsonforms/core\";\nimport { JsonFormsReduxContext } from \"@jsonforms/react\";\nimport yaml from \"js-yaml\";\nimport store from \"./store\";\n\nconst $RefParser = require(\"@apidevtools/json-schema-ref-parser\");\n\nconst isYAML = process.env.YAML_SOURCE || true;\n\nlet schemaURL: string = \"\",\n  uischemaURL: string = \"\";\n\nif (isYAML) {\n  schemaURL = \"schema/schema.yaml\";\n  uischemaURL = \"schema/uischema.yaml\";\n} else {\n  schemaURL = \"schema/schema.json\";\n  uischemaURL = \"schema/uischema.json\";\n}\n\nconst fetchSchema = async (url: string, dereference: boolean = false) => {\n  const text = await (await fetch(url)).text();\n  const out = yaml.safeLoad(text);\n  \n  console.debug(url, out);\n\n  if (!dereference) return out;\n\n  try {\n    return await $RefParser.dereference(out);\n  } catch (err) {\n    console.error(\"Cannot dereference\", err);\n    throw err;\n  }\n};\n\nfetchSchema(schemaURL).then((schemaRetrieved) => {\n  console.log(\"schemaRetrieved\", schemaRetrieved);\n\n  $RefParser.dereference(schemaRetrieved, (err: any, schema: any) => {\n    console.log(\"schema\", err);\n    if (err) {\n      console.error(err);\n      throw err;\n    }\n    fetchSchema(uischemaURL, true).then((uischema) => {\n      const dataC = uischema._meta?.data || {};\n      store.dispatch(Actions.init(dataC, schema, uischema));\n    });\n  });\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <JsonFormsReduxContext>\n        <App />\n      </JsonFormsReduxContext>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}